import { IconTrendingUp, IconTrendingDown } from "@tabler/icons-react"
import {
  Card,
  CardAction,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

interface DailyStatsItem {
  date: string;
  generated: number;
  executed: number;
  total: number;
  percentageRise?: number;
}

interface SectionCardsProps {
  totalGeneratedQueries: number;
  totalExecutedQueries: number;
  dailyStats: DailyStatsItem[];
}

export function SectionCards({ totalGeneratedQueries, totalExecutedQueries, dailyStats }: SectionCardsProps) {
  const todayStats = dailyStats && dailyStats.length > 0 ? dailyStats[dailyStats.length - 1] : null;
  const yesterdayStats = dailyStats && dailyStats.length > 1 ? dailyStats[dailyStats.length - 2] : null;

  const generatedPercentageChange = todayStats
    ? yesterdayStats && yesterdayStats.generated > 0
      ? ((todayStats.generated - yesterdayStats.generated) / yesterdayStats.generated) * 100
      : todayStats.generated > 0 ? 100 : 0
    : 0;

  const executedPercentageChange = todayStats
    ? yesterdayStats && yesterdayStats.executed > 0
      ? ((todayStats.executed - yesterdayStats.executed) / yesterdayStats.executed) * 100
      : todayStats.executed > 0 ? 100 : 0
    : 0;

  const getBadgeVariant = (percentage: number) => {
    if (percentage > 0) return "success";
    if (percentage < 0) return "destructive";
    return "outline";
  };

  const getIcon = (percentage: number) => {
    if (percentage > 0) return <IconTrendingUp className="h-4 w-4" />;
    if (percentage < 0) return <IconTrendingDown className="h-4 w-4" />;
    return null;
  };

  const formatPercentage = (percentage: number) => {
    if (percentage === 0) return "0%";
    return `${percentage > 0 ? '+' : ''}${percentage.toFixed(0)}%`;
  };

  return (
    <div className="grid grid-cols-1 gap-4 @xl/main:grid-cols-2 @5xl/main:grid-cols-4">
      <Card className="@container/card h-full">
        <CardHeader>
          <CardDescription>Total Generated Queries</CardDescription>
          <CardTitle className="text-xl font-semibold tabular-nums @[250px]/card:text-3xl">
            {totalGeneratedQueries}
          </CardTitle>
          <CardAction>
            <Badge variant={getBadgeVariant(generatedPercentageChange)}>
              {getIcon(generatedPercentageChange)}
              {formatPercentage(generatedPercentageChange)}
            </Badge>
          </CardAction>
        </CardHeader>
        <CardFooter className="flex-col items-start gap-1.5 text-sm">
          <div className="line-clamp-1 flex gap-2 font-medium">
            All queries generated by AuraSQL
          </div>
          <div className="text-muted-foreground">
            Includes both executed and non-executed queries
          </div>
        </CardFooter>
      </Card>
      <Card className="@container/card h-full">
        <CardHeader>
          <CardDescription>Total Executed Queries</CardDescription>
          <CardTitle className="text-xl font-semibold tabular-nums @[250px]/card:text-3xl">
            {totalExecutedQueries}
          </CardTitle>
          <CardAction>
            <Badge variant={getBadgeVariant(executedPercentageChange)}>
              {getIcon(executedPercentageChange)}
              {formatPercentage(executedPercentageChange)}
            </Badge>
          </CardAction>
        </CardHeader>
        <CardFooter className="flex-col items-start gap-1.5 text-sm">
          <div className="line-clamp-1 flex gap-2 font-medium">
            Queries successfully executed
          </div>
          <div className="text-muted-foreground">
            Subset of generated queries
          </div>
        </CardFooter>
      </Card>
    </div>
  )
}